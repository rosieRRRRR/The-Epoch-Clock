## Epoch Clock Trustless Bitcoin Contract

⚠️ **Not audited.** This contract has not yet been tested in production. Use at your own risk.

🟢 This contract is designed to operate on Bitcoin mainnet, using a real inscription (ID: 96733659) as its shared configuration anchor.

**Trustless time. Native enforcement. Zero dependencies.**

Time-based Bitcoin ownership. Enforced on Layer 1. No opcodes. No trust. No oracles.

It enables modular, reusable time-based logic governed by a shared on-chain configuration (the Epoch Clock), while enforcing role transitions without relying on external systems or mempool race conditions.

### Purpose

This contract:

* Enforces time-locked transfer of spend rights between two parties.
* Uses a shared Epoch Clock config (Ordinal inscription 96733659) to define the duration.
* Enforces expiry using Bitcoin consensus rules.
* Guarantees Party A cannot claim funds after expiry.
* Proves timing and logic on-chain without oracles.
* Enables template-style logic reuse without needing OP\_CAT.
* Trustlessness depends entirely on Bitcoin consensus. This contract assumes no mempool visibility, no oracle access, and no inscription parsing at execution.

> All contract logic is enforced by Bitcoin consensus. No state is fetched or inferred from inscriptions or external data. Verification is offline and deterministic.

> By standardising time logic around a shared config, users can build interoperable protocols such as vault expiries, commitment windows, or lending durations without needing a new opcode or runtime engine.

**Note:** This contract does not validate or require the Epoch Clock config at execution time. The config is used to derive expiry and to prove post-hoc consistency.

### Parameters

* Contract Address: `[INSERT_P2WSH_ADDRESS_HERE]`
* Expiry Timestamp: `[INSERT_EXPIRY_TIMESTAMP]` (e.g. 1749187958)
* Duration: 4 hours (14400 seconds)
* Config Source: Ordinal inscription 96733659 (confirmed in block \[INSERT\_BLOCK\_HEIGHT], timestamp \[INSERT\_TIMESTAMP])
* Config SHA256: `b7d9b1c13bd1c075343d2ab1e8f5078b3c23dbf43fc635ee530cc697e5e016fd`
* Expiry Time: `start_time + duration` (start = funding TX confirmation)

Epoch Clock config snippet:

```json
{
  "protocol": "epochclock",
  "genesis_timestamp": 1710000000,
  "epoch_interval_seconds": 14400,
  "_id": "epochclock.v0.1",
  "_script_template_sha256": "[INSERT_SCRIPT_TEMPLATE_SHA]"
}
```

> The config is not used in the script. It is a public reference that anyone can verify matches the hardcoded expiry.

To compute `_script_template_sha256`, hash the raw text of the template file using SHA256.

To verify the config SHA matches inscription 96733659, retrieve the inscription payload and hash it using SHA256.

**Note:** `'epoch_interval_seconds'` in the config corresponds to the `'duration'` used in redeem script construction.

Example config file: `configs/epochclock-4hr.json`

The `verify_duration.py` script is located at `tools/verify_duration.py` and confirms the expiry timestamp matches the config.

> These files are located in the repository you cloned. Edit them locally to substitute your keys and timestamps.

Multiple users can deploy identical contracts by reusing the same config. Each user should insert their own public keys and set their own funding transaction. This enables modular, reproducible contract logic with personalised control.

---

### Contract Script (Redeem Script)

```
OP_IF
  <PartyA_PUBKEY> OP_CHECKSIG
OP_ELSE
  <EXPIRY_TIMESTAMP> OP_CHECKLOCKTIMEVERIFY OP_DROP <PartyB_PUBKEY> OP_CHECKSIG
OP_ENDIF
```

> Replace `<PartyA_PUBKEY>` and `<PartyB_PUBKEY>` with your own compressed public keys (in hex format).

SHA256 of this redeem script must be published in `deployment/funding_tx_info.json` for auditability.

To compute the P2WSH address:

```bash
echo -n '<redeem_script_hex>' | xxd -r -p | sha256sum
```

**SIGHASH recommendation:**

> Use `SIGHASH_ALL | SIGHASH_ANYONECANPAY` to safely coordinate multiple signers without locking extra inputs.

Script template file: `contracts/epoch-clock-4hr.cltv.txt`
Suggested naming pattern: `epochlock_[duration]s_[partyA_short]_[partyB_short].cltv.txt`

---

### What This Script Enforces

* Party A can claim only before expiry.
* Party B can claim only after expiry.
* Others cannot claim, even with replay or early broadcast.

---

### Funding Transaction (TX0)

Send BTC to the P2WSH address.

> The OP\_RETURN is optional but recommended for transparency and tooling support.

Include OP\_RETURN:

```
epochclock:96733659;interval:14400;sha256:b7d9b1c13bd1c075343d2ab1e8f5078b3c23dbf43fc635ee530cc697e5e016fd
```

Recommended format for OP\_RETURN audit tags. This is not parsed by script and is ignored by nodes.

> Standardised OP\_RETURN tags allow external observers to identify and classify contracts based on Epoch Clock lineage, enabling meta-coordination layers on top of L1.

---

### Claim Conditions

#### Claim Before Expiry

* Use IF path
* Sign with Party A key
* No locktime required

#### Claim After Expiry

* Use ELSE path
* Sign with Party B key
* Set `nLockTime = EXPIRY_TIMESTAMP`
* Set inputs to `0xfffffffe`
* ⚠️ Must wait until block time ≥ expiry, or the transaction will be rejected by the network.
* Transactions must use SegWit-compatible signatures (`SIGHASH_ALL | ANYONECANPAY`) to prevent malleability and replay issues on CLTV-enforced paths.

---

### Claim Enforcement Summary

* Party A can spend before expiry.
* Party B can spend after expiry with CLTV enforced.
* Expiry is hardcoded into the script. The Epoch Clock config is used for consistency and reproducibility.

Auditors can:

* Verify redeem script matches logic.
* Confirm expiry matches derived value.
* Ensure SHA256 matches funded P2WSH.

---

### 🔧 How to Test

⚠️ **Mainnet only.** All tests use real Bitcoin transactions. You are responsible for your own transaction fees. No reimbursements will be provided.

1. Clone this repo and review the `contracts/trustless-expiry` folder.
2. Replace example public keys in the redeem script template with your own.
3. Use the shared config (inscription ID `96733659`) to define expiry logic.
4. Build the redeem script and calculate the script SHA256.
5. Fund the resulting P2WSH address with real BTC.
6. Use `verify_duration.py` to confirm expiry timestamp matches config logic.
7. Record deployment details in `deployment/expiry_proof.md`, including:

   * Script SHA256
   * Link to the funded script on [mempool.space](https://mempool.space)

> Reminder: This contract runs on Bitcoin mainnet. Fund and interact only if you understand the risks. No compensation is offered for any costs incurred.

---
